name: Store publish (MSIX via StoreBroker)

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: windows-latest
    env:
      STORE_APP_ID:      ${{ secrets.STORE_PRODUCT_ID }}     # Your app's AppId
      STORE_TENANT_ID:   ${{ secrets.STORE_TENANT_ID }}
      STORE_CLIENT_ID:   ${{ secrets.STORE_CLIENT_ID }}
      STORE_CLIENT_SECRET: ${{ secrets.STORE_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: centroid-is/sildarvinnsla
          token: ${{ secrets.GH_PAT }}
          path: sildarvinnsla
          ref: master

      - uses: subosito/flutter-action@v2
        with: { channel: stable }

      - name: Build Windows
        working-directory: sildarvinnsla/hmi
        run: flutter build windows --release

      - name: Create MSIX for Store
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: dart run msix:create --store

      - name: Find built MSIX
        id: pkg
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: |
          $msix = Get-ChildItem -Recurse -Filter *.msix | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $msix) { throw "No .msix found" }
          "msix=$($msix.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact (.msix)
        uses: actions/upload-artifact@v4
        with:
          name: sv.msix
          path: ${{ steps.pkg.outputs.msix }}

      - name: Publish via StoreBroker
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: |
          Install-Module StoreBroker -Scope CurrentUser -Force

          # Auth once; StoreBroker handles tokens for you
          $sec  = ConvertTo-SecureString $env:STORE_CLIENT_SECRET -AsPlainText -Force
          $cred = New-Object pscredential($env:STORE_CLIENT_ID, $sec)
          Set-StoreBrokerAuthentication -TenantId $env:STORE_TENANT_ID -Credential $cred

          # Create (or reuse) a minimal submission config
          if (-not (Test-Path "submission.json")) {
            New-StoreBrokerConfigFile -Path submission.json -AppId $env:STORE_APP_ID
          }

          # Bundle the MSIX into a Store-ready package.zip + package.json
          New-SubmissionPackage -ConfigPath .\submission.json `
                                -AppxPath "${{ steps.pkg.outputs.msix }}" `
                                -OutPath out -OutName package

          # Spin up a new submission, replace previous packages, upload & commit
          $sub = New-ApplicationSubmission -AppId $env:STORE_APP_ID -Force
          ($sub.applicationPackages) | ForEach-Object { $_.fileStatus = "PendingDelete" }
          $pkg = Get-Content .\out\package.json -Raw | ConvertFrom-Json
          $sub.applicationPackages += $pkg.applicationPackages
          Set-ApplicationSubmission -AppId $env:STORE_APP_ID -UpdatedSubmission $sub
          Set-SubmissionPackage -PackagePath .\out\package.zip -UploadUrl $sub.fileUploadUrl
          Complete-ApplicationSubmission -AppId $env:STORE_APP_ID -SubmissionId $sub.id

