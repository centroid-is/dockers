name: Store publish (MSIX)

on:
  workflow_dispatch: 

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: windows-latest
    steps:
      - name: Vulnarable
        run: git config --system --add safe.directory '*'
      - uses: actions/checkout@v4
        with:
          repository: centroid-is/sildarvinnsla
          token: ${{ secrets.GH_PAT }}
          path: sildarvinnsla
          ref: master

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with: { channel: stable }

      - name: Build Windows
        working-directory: sildarvinnsla/hmi
        run: flutter build windows --release

      - name: Create MSIX for Store
        working-directory: sildarvinnsla/hmi
        run: |
          dart run msix:create --store
        shell: powershell

      - name: Locate MSIX and create .msixupload
        working-directory: sildarvinnsla/hmi
        id: pkg
        shell: powershell
        run: |
          $msix = Get-ChildItem -Recurse -Filter *.msix | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $msix) { throw "No .msix file found" }

          $dir = $msix.DirectoryName
          $zipPath = Join-Path $dir "app.zip"
          $msixuploadPath = Join-Path $dir "app.msixupload"

          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          if (Test-Path $msixuploadPath) { Remove-Item $msixuploadPath -Force }

          # Create a ZIP that contains the .msix
          Compress-Archive -Path $msix.FullName -DestinationPath $zipPath -Force

          # Rename/move to .msixupload (Store expects this extension)
          Move-Item -Path $zipPath -Destination $msixuploadPath -Force

          "msixupload=$msixuploadPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "msixname=$($msix.Name)"     | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact (.msixupload)
        uses: actions/upload-artifact@v4
        with:
          name: app.msixupload
          path: ${{ steps.pkg.outputs.msixupload }}

      - name: Get Azure AD token for Dev Center
        working-directory: sildarvinnsla/hmi
        id: token
        shell: powershell
        run: |
          $body = @{
            grant_type    = "client_credentials"
            client_id     = "${{ secrets.STORE_CLIENT_ID }}"
            client_secret = "${{ secrets.STORE_CLIENT_SECRET }}"
            resource      = "https://manage.devcenter.microsoft.com"
          }
          $resp = Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/${{ secrets.STORE_TENANT_ID }}/oauth2/token" -Body $body
          if (-not $resp.access_token) { throw "Failed to obtain access token" }
          "access_token=$($resp.access_token)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create draft submission
        working-directory: sildarvinnsla/hmi
        id: create
        shell: powershell
        run: |
          $headers = @{
            Authorization = "Bearer ${{ steps.token.outputs.access_token }}"
            Accept        = "application/json"
          }
          $appId = "${{ secrets.STORE_PRODUCT_ID }}"
          $url = "https://manage.devcenter.microsoft.com/v1.0/my/applications/$appId/submissions"

          # Although the docs say “no body”, some gateways now enforce JSON media type.
          # Sending {} with Content-Type application/json is accepted.
          $sub = Invoke-RestMethod -Headers $headers -Method Post -Uri $url -ContentType "application/json" -Body "{}"

          if (-not $sub.id) { throw "Create submission failed" }
          "submission_id=$($sub.id)"              | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "file_upload_url=$($sub.fileUploadUrl)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
  
      - name: Update submission metadata (register package placeholder)
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: |
          $headers = @{
            Authorization = "Bearer ${{ steps.token.outputs.access_token }}"
            "Content-Type" = "application/json"
            Accept = "application/json"
          }
          $appId = "${{ secrets.STORE_PRODUCT_ID }}"
          $subId = "${{ steps.create.outputs.submission_id }}"

          # IMPORTANT: This must be the MSIX inside the zip
          $fileName = "${{ steps.pkg.outputs.msixname }}"

          $body = @{
            applicationPackages = @(@{
              fileName = $fileName
              fileStatus = "PendingUpload"
              minimumDirectXVersion = "None"
              minimumSystemRam = "None"
            })
          } | ConvertTo-Json -Depth 10

          $url = "https://manage.devcenter.microsoft.com/v1.0/my/applications/$appId/submissions/$subId"
          $resp = Invoke-RestMethod -Headers $headers -Method Put -Uri $url -Body $body
          if ($resp.status -ne "PendingCommit") { Write-Host "Submission status: $($resp.status)" }
  
      - name: Upload .msixupload to SAS URL
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: |
          $uploadUrl = "${{ steps.create.outputs.file_upload_url }}"
          $filePath  = "${{ steps.pkg.outputs.msixupload }}"
          if (-not (Test-Path $filePath)) { throw "Missing package file: $filePath" }
          # Azure Blob PUT with required header
          Invoke-WebRequest -Uri $uploadUrl -Method Put -InFile $filePath -Headers @{ "x-ms-blob-type"="BlockBlob" }

      - name: Commit submission
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: |
          $headers = @{ Authorization = "Bearer ${{ steps.token.outputs.access_token }}" }
          $appId = "${{ secrets.STORE_PRODUCT_ID }}"
          $subId = "${{ steps.create.outputs.submission_id }}"
          $commitUrl = "https://manage.devcenter.microsoft.com/v1.0/my/applications/$appId/submissions/$subId/commit"
          Invoke-RestMethod -Headers $headers -Method Post -Uri $commitUrl | Out-Null

      - name: Poll submission status
        working-directory: sildarvinnsla/hmi
        shell: powershell
        run: |
          $headers = @{ Authorization = "Bearer ${{ steps.token.outputs.access_token }}" }
          $appId = "${{ secrets.STORE_PRODUCT_ID }}"
          $subId = "${{ steps.create.outputs.submission_id }}"
          $statusUrl = "https://manage.devcenter.microsoft.com/v1.0/my/applications/$appId/submissions/$subId/status"

          for ($i=0; $i -lt 60; $i++) {
            $st = Invoke-RestMethod -Headers $headers -Method Get -Uri $statusUrl
            Write-Host "Status: $($st.status)"
            if ($st.status -in @("CommitFailed","CertificationFailed","ReleaseFailed")) {
              Write-Host "Errors:"; $st.statusDetails.errors | ConvertTo-Json -Depth 10
              throw "Store submission failed: $($st.status)"
            }
            if ($st.status -in @("PreProcessing","Certification","Ingestion","Release","Completed")) {
              # Success path. It may take time to reach Completed; we just exit once it's accepted (post-commit).
              break
            }
            Start-Sleep -Seconds 30
          }
          if ($i -ge 60) { Write-Warning "Timed out waiting for final status (check Partner Center manually)." }

